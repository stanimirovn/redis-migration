---
title: Introduction for App Developers
owner: London Services
---

<strong><%= modified_date %></strong>

This topic introduces <%= vars.product_full %> to developers
and links to more information.

For instructions on creating, binding to, and deleting an instance of the On-Demand,
or Shared-VM plan, see [Using <%= vars.product_full %>](./using.html).


## <a id="services"></a> Service Offerings

<%= partial vars.path_to_partials + '/redis/service-offerings', :locals => {
  :redis_name => vars.product_short,
  } %>

## <a id="related-software"></a>Related Software

Below are descriptions of software frequently used with Redis.

### <a id="spring"></a><%= vars.product_short %> with Spring

Spring Cloud Spring Service Connectors connect to <%= vars.product_short %>.
For more information, see the [Redis](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_redis) section
in the Spring Cloud Spring Service Connector documentation.

Spring Cloud Cloud Foundry connectors automatically connect to <%= vars.product_short %>.
For more information, see the [Redis](http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_redis) section
in the Spring Cloud Cloud Foundry Connector documentation.

To view an example Spring app using Redis as a cache with failover,
see the [Redis Reference Architectures](https://github.com/pivotal-cf/redis-reference-architecture) GitHub
repository.

### <a id="steeltoe"></a><%= vars.product_short %> with Steeltoe

Steeltoe Cloud Connectors can connect to <%= vars.product_short %>.
See the [Steeltoe Cloud Connectors](https://steeltoe.io/docs/steeltoe-connectors/#5-0-redis) documentation.


To view examples of Steeltoe apps using Redis as a cache with failover,
see the <a href="https://github.com/pivotal-cf/RedisReferenceArchitectureSteeltoe">Example Steeltoe App</a>
repository in GitHub.

<p class="note warning"><strong>Warning:</strong>
  The Steeltoe connector for Redis requires <%= vars.product_short %> to support Lua scripting.
  Check whether the language you are using requires Lua scripting. If it does, contact your operator.
  By default, Lua scripting is disabled for <%= vars.product_short %>, but an operator can
  change the setting to enable it by selecting the <strong>Lua Scripting</strong> checkbox in each service plan's <strong><a href="./installing.html#on-demand-plan-config">On-Demand Plan</a></strong> configuration pane.
</p>

### <a id="other-software"></a>Other Software

* **Pivotal Dev** is a version of <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) that is small enough
to run on a local machine. For more information, see [Pivotal dev](https://pivotal.io/pcf-dev).

* **Sample Ruby code** that uses <%= vars.app_runtime_abbr %> is in the <a href="https://github.com/pivotal-cf/cf-redis-example-app">CF Redis Example App</a> GitHub repository.

* **Redis** is an open-source in-memory datastore. To learn more about Redis itself, see <a href="http://redis.io">redis.io</a>.

## <a id="using-tls"></a>Use TLS

Follow the steps below to securely bind your apps to a Redis instance with TLS.

Spring and Steeltoe apps use TLS by default when available.

### <a id="check-availability-tls"></a>Check Availability

You can check if TLS has been enabled on the on-demand Redis service by inspecting the service key.
To do so:
<ol>
    <li>Create a service key by running the following command: <pre>cf create-service-key MY-INSTANCE MY-KEY</pre></li>
    <li>Display the service key by running the following command: <pre>cf service-key MY-INSTANCE MY-KEY</pre><br>
        This returns a JSON response in this format:<br>
    <pre>{
            "host": "q-s0.redis-instance.ENVIRONMENT-NAME-services-subnet.service-instance-GUID.bosh",
            "password": YOUR-PASSWORD,
            "port": INSECURE-PORT-NUMBER,
            "tls\_port": SECURE-PORT-NUMBER
        }
        </pre>
    </li>
</ol>
If you do not see the `tls_port` field, TLS has not been enabled on your Redis service.

### <a id="new-apps"></a>Bind New Apps with TLS

Follow the steps below to securely bind new apps to a Redis instance.

For new apps, `cf bind-service` exposes both TLS ports and non-secure ports. Custom connectors also make both ports available. To support secure service bindings, you must specify the TLS port in your app code.

Below is an example of manually selecting the TLS port for a `redis_client` in Ruby:

<pre>
require 'redis'
require 'cf-app-utils'

def redis_credentials
  service_name = ENV['service_name'] || "redis"
  if ENV['VCAP_SERVICES']
      all_pivotal_redis_credentials = CF::App::Credentials.find_all_by_all_service_tags(['redis', 'pivotal'])
      if all_pivotal_redis_credentials && all_pivotal_redis_credentials.first
          all_pivotal_redis_credentials.first
      else
          redis_service_credentials = CF::App::Credentials.find_by_service_name(service_name)
          redis_service_credentials
      end
  end
end

def redis_client
   @client ||= Redis.new(
     host: redis_credentials.fetch('host'),
     port: redis_credentials.fetch('tls_port'),
     password: redis_credentials.fetch('password'),
     ssl: true,
     timeout: 30
end
</pre>

For Spring apps, use Java CFEnv v1.1.0 or later. See [Redis Spring Boot Reference Architecture](https://github.com/pivotal-cf/redis-reference-architecture) in GitHub.

For Steeltoe apps, use Steeltoe v2.3.0 or later. See [Redis Steeltoe Reference Architecture](https://github.com/pivotal-cf/RedisReferenceArchitectureSteeltoe) in GitHub.

### <a id="existing-apps"></a>Bind Existing Apps with TLS

For each app using the Redis service with a non-TLS binding:

1. Remove the current binding by running the following command:
<pre>cf unbind-service APP-NAME SERVICE-INSTANCE</pre>
2. Re-bind to the Redis instance by running the following command:
<pre>cf bind-service APP-NAME SERVICE-INSTANCE</pre>
3. Restage the app by running the following command:
<pre>cf restage-app APP-NAME</pre>

Your app now communicates securely with the Redis on-demand service instance.
