---
title: Quickstart Guide for App Developers
owner: London Services
---
<strong><%= modified_date %></strong>

This topic provides some sample apps in various languages to demonstrate how to get <%= vars.product_full %> up and running quickly.
It also highlights the critical components of the apps that allow them to connect to a Redis instance.
Credentials to connect to a <%= vars.product_short %> instance are passed to the apps as environment variables under `VCAP_SERVICES`.

Additionally, this topic includes advice for setting up Spring Sessions with <%= vars.product_short %>.

## <a id="feedback"></a> Feedback

If you have feedback about this page, or you want more information (other quickstart guides, sample use cases),
please send a message to [VMware Tanzu Feedback](mailto:"pivotal-cf-feedback@pivotal.io").

## <a id="quickstart_apps"></a> Quickstart Apps

All apps using <%= vars.product_short %> must parse and read the <%= vars.product_short %> instance credentials from the environment.
The credentials are available to the app once a <%= vars.product_short %> instance is bound to it and are viewable by typing `$cf env {app_name}`.

Prerequisites for these examples include access to a Marketplace with `p-redis` or `p.redis`.
For reference, `p.redis` refers to the Redis service that provides on-demand
instances and `p-redis` refers to the Redis service that provides shared-VM instances.
Any service offering and plan work with the following examples. 
You can view available plans and instance types in the Marketplace.

### <a id="java-quickstart"></a> Quickstart Java App

This is a basic Java app with the capability to get and set keys in Redis and view configuration information.
Prerequisites include [Maven](https://maven.apache.org/install.html).

Here we use an on-demand-cache plan of the `p.redis` service, but a `p-redis` instance also works.

<pre class=terminal>
$ git clone git@github.com:colrich/RedisForPCF-Java-Example.git java_redis_app
$ cd java_redis_app
$ mvn package
$ cf create-service p.redis on-demand-cache redis_instance
$ cf push redis_example_app -p target/RedisExample-0.0.1-SNAPSHOT.jar
$ cf bind-service redis_example_app redis_instance
$ cf restage redis_example_app
</pre>

You can then visit the app in your browser window. The app has three entry points:

*  "/" --- Gets info about a bound Redis instance
* "/set" --- Sets a given key to a given value. E.g., {APP_URL}/set?kn=somekeyname&kv=valuetoset
* "/get" --- Gets the value stored at a given key. E.g., {APP_URL}/get?kn=somekeyname

In the [application code](https://github.com/colrich/RedisForPCF-Java-Example/blob/master/src/main/java/io/pivotal/examples/RedisExample/RedisInfoController.java),
the snippet where VCAP_SERVICES is read and parsed is here:

<pre class=terminal>
@RequestMapping("/")
public RedisInstanceInfo getInfo() {
    LOG.log(Level.WARNING, "Getting Redis Instance Info in Spring controller...");
    // first we need to get the value of VCAP_SERVICES, the environment variable
    // where connection info is stored
    String vcap = System.getenv("VCAP_SERVICES");
    LOG.log(Level.WARNING, "VCAP_SERVICES content: " + vcap);


    // now we parse the json in VCAP_SERVICES
    LOG.log(Level.WARNING, "Using GSON to parse the json...");
    JsonElement root = new JsonParser().parse(vcap);
    JsonObject redis = null;
    if (root != null) {
        if (root.getAsJsonObject().has("p.redis")) {
            redis = root.getAsJsonObject().get("p.redis").getAsJsonArray().get(0).getAsJsonObject();
            LOG.log(Level.WARNING, "instance name: " + redis.get("name").getAsString());
        }
        else if (root.getAsJsonObject().has("p-redis")) {
            redis = root.getAsJsonObject().get("p-redis").getAsJsonArray().get(0).getAsJsonObject();
            LOG.log(Level.WARNING, "instance name: " + redis.get("name").getAsString());
        }
        else {
            LOG.log(Level.SEVERE, "ERROR: no redis instance found in VCAP_SERVICES");
        }
    }

    // then we pull out the credentials block and produce the output
    if (redis != null) {
        JsonObject creds = redis.get("credentials").getAsJsonObject();
        RedisInstanceInfo info = new RedisInstanceInfo();
        info.setHost(creds.get("host").getAsString());
        info.setPort(creds.get("port").getAsInt());
        info.setPassword(creds.get("password").getAsString());

        // the object will be json serialized automatically by Spring web - we just need to return it
        return info;
    }
    else return new RedisInstanceInfo();
}
</pre>

### <a id="node-quickstart"></a> Quickstart Node App

This is a basic node app with the capability to get and set keys in Redis and view configuration information.
Prerequisites are the `cf cli` and access to a Marketplace with p-redis or p.redis.

Here we use an on-demand-cache plan for the `p.redis` service, but a `p-redis` instance also works.

<pre class=terminal>
$ git clone git@github.com:colrich/RedisForPCF-Node-Example.git node_redis_app
$ cd node_redis_app
$ cf create-service p.redis on-demand-cache redis_instance
$ cf push redis_example_app
$ cf bind-service redis_example_app redis_instance
$ cf restage redis_example_app
</pre>

You can then visit the app in your browser window. The app has three entry
points:

*  "/" --- Gets info about bound redis instance
* "/set" --- Sets a given key to a given value. E.g., {APP_URL}/set?kn=somekeyname&kv=valuetoset
* "/get" --- Gets the value stored at a given key. E.g., {APP_URL}/get?kn=somekeyname

In the [application code](https://github.com/colrich/RedisForPCF-Node-Example/blob/master/index.js), the snippet where VCAP_SERVICES is read and parsed is here:

<pre class=terminal>
// parses the VCAP_SERVICES env var and looks for redis service instances
function getVcapServices() {
  var vcstr = process.env.VCAP_SERVICES;
  if (vcstr != null && vcstr.length > 0 && vcstr != '{}') {
    console.log("found VCAP_SERVICES: " + vcstr)

    var vcap = JSON.parse(vcstr);
    if (vcap != null) {
      if (vcap.hasOwnProperty("p.redis")) {
        console.log("found redis instance: " + vcap["p.redis"][0].name);
        return vcap["p.redis"][0]
      }
      else if (vcap.hasOwnProperty("p-redis")) {
        console.log("found redis instance: " + vcap["p-redis"][0].name);
        return vcap["p-redis"][0]
      }
      else {
        console.log("ERROR: no redis service bound!")
      }
    }
    else {
      console.log("ERROR: no redis service bound!")
    }
  }
  else {
    console.log("ERROR: VCAP_SERVICES does not contain a redis block")
  }
  return null
}

// pulls the necessary connection info out of the parsed VCAP_SERVICES block for
// the redis connection
function getRedisInfo(vcap) {
  var info = {}
  info["host"] = vcap["credentials"]["host"]
  info["port"] = vcap["credentials"]["port"]
  info["password"] = vcap["credentials"]["password"]
  return info
}


// set the port to listen on; for apps, listen on $PORT (usually 8000)
app.set('port', (process.env.PORT || 8080))


// this method looks in VCAP_SERVICES for a redis service instance and outputs the
// host / port / password info to the response
app.get('/', function(request, response) {
  console.log("Getting Redis connection info from the environment...")

  var vcap = getVcapServices()
  if (vcap != null) {
    var info = getRedisInfo(vcap)
    console.log("connection info: " + info.host + " / " + info.port + " / " + info.password)
    response.send("connection info: " + info.host + " / " + info.port + " / " + info.password)
  }
  else {
    console.log("ERROR: VCAP_SERVICES does not contain a redis block or no redis bound")
    response.send("ERROR: VCAP_SERVICES does not contain a redis block or no redis bound")
  }
})
</pre>

### <a id="ruby-quickstart"></a> Quickstart Ruby App
This is a basic ruby app with the capability to get and set keys in Redis and view configuration information.
Here we use an instance of the shared-VM service, but any `p-redis` or `p.redis` instance works.

<pre class=terminal>
$ git clone git@github.com:pivotal-cf/cf-redis-example-app.git ruby_redis_app
$ cd ruby_redis_app
$ cf create-service p-redis shared-vm redis_instance
$ cf push redis_example_app --no-start
$ cf bind-service redis_example_app redis_instance
$ cf start redis_example_app"
</pre>

You can then get, set, and delete keys:

<pre class=terminal>
$ export APP=redis-example-app.my-cloud-foundry.com
$ curl -X PUT $APP/foo -d 'data=bar'
success
$ curl -X GET $APP/foo
bar
$ curl -X DELETE $APP/foo
success
</pre>

In the [application code](https://github.com/pivotal-cf/cf-redis-example-app/blob/master/lib/app.rb), the method where VCAP_SERVICES is read is here:

<pre class=terminal>
def redis_credentials
  service_name = ENV['service_name'] || "redis"

  if ENV['VCAP_SERVICES']
    all_pivotal_redis_credentials = CF::App::Credentials.find_all_by_all_service_tags(['redis', 'pivotal'])
    if all_pivotal_redis_credentials && all_pivotal_redis_credentials.first
      all_pivotal_redis_credentials && all_pivotal_redis_credentials.first
    else
      redis_service_credentials = CF::App::Credentials.find_by_service_name(service_name)
      redis_service_credentials
    end
  end
end
</pre>

The method where VCAP_SERVICES is parsed is here:

<pre class=terminal>
def redis_client
  @client ||= Redis.new(
    host: redis_credentials.fetch('host'),
    port: redis_credentials.fetch('port'),
    password: redis_credentials.fetch('password'),
    timeout: 30
  )
end
</pre>

## <a id="springsession"></a>Spring Session with <%= vars.product_short %>

One common use case of <%= vars.product_short %> is management of a user's session information with <a id="https://docs.spring.io/spring-session/docs/current/reference/html5/">Spring Session</a>.
Spring Session provides an API and implementations with which to manage sessions.

This topic describes how to use <%= vars.product_short %> as the backend with Spring Session to manage user session information.

This documentation is adopted from the [Spring Session docs](https://docs.spring.io/spring-session/docs/current/reference/html5/#httpsession)
and extends to include instructions for use with <%= vars.product_short %>.
The document is also adopted from this [Spring Session - Spring Boot guide](https://docs.spring.io/spring-session/docs/current/reference/html5/guides/boot-redis.html).

### <a id="configuring Spring"></a> Setting Up Spring Session

#### <a id ="spring_dependencies"></a>Updating Dependencies

To use Spring Session, update your dependencies to include spring-session-data-redis. The below example is for Maven.

<code>pom.xml</code>

<pre>
  <code><span>&lt;dependencies&gt;</span>
          <span>&lt;!-- ... --&gt;</span>
          <span>&lt;dependency&gt;</span>
                  <span>&lt;groupId&gt;</span>org.springframework.session<span>&lt;/groupId&gt;</span>
                  <span>&lt;artifactId&gt;</span>spring-session-data-redis<span>&lt;/artifactId&gt;</span>
                  <span>&lt;version&gt;</span>1.3.1.RELEASE<span>&lt;/version&gt;</span>
                  <span>&lt;type&gt;</span>pom<span>&lt;/type&gt;</span>
          <span >&lt;/dependency&gt;</span>
          <span >&lt;dependency&gt;</span>
                  <span >&lt;groupId&gt;</span>biz.paluch.redis<span >&lt;/groupId&gt;</span>
                  <span >&lt;artifactId&gt;</span>lettuce<span >&lt;/artifactId&gt;</span>
                  <span >&lt;version&gt;</span>3.5.0.Final<span >&lt;/version&gt;</span>
          <span >&lt;/dependency&gt;</span>
          <span >&lt;dependency&gt;</span>
                  <span >&lt;groupId&gt;</span>org.springframework<span >&lt;/groupId&gt;</span>
                  <span >&lt;artifactId&gt;</span>spring-web<span >&lt;/artifactId&gt;</span>
                  <span >&lt;version&gt;</span>4.3.4.RELEASE<span >&lt;/version&gt;</span>
          <span >&lt;/dependency&gt;</span>
  <span >&lt;/dependencies&gt;</span></code>
</pre>

#### <a id ="spring_config"></a>Spring Java Configuration

After adding the required dependencies, we can create our Spring configuration.

The Spring configuration is responsible for creating a Servlet Filter that replaces the <code>HttpSession</code>
implementation with an implementation backed by Spring Session.
Add the following Spring Configuration:

<pre><code><span>@EnableRedisHttpSession</span> <i data-value="1"></i><b>(1)</b>
<span>public</span> <span>class</span> <span>Config</span> {

        <span>@Bean</span>
        <span>public</span> LettuceConnectionFactory connectionFactory() {
                <span>return</span> <span>new</span> LettuceConnectionFactory(); <i data-value="2"></i><b>(2)</b>
        }
}</code></pre>

<table>
<tr>
<td><i data-value="1"></i><b>1</b></td>
<td>The <code>@EnableRedisHttpSession</code> annotation creates a Spring Bean with the name of <code>springSessionRepositoryFilter</code> that implements Filter.
The filter is what is in charge of replacing the <code>HttpSession</code> implementation to be backed by Spring Session.
In this instance Spring Session is backed by Redis.</td>
</tr>
<tr>
<td><i data-value="2"></i><b>2</b></td>
<td>We create a <code>RedisConnectionFactory</code> that connects Spring Session to the Redis Server.
We configure the connection to connect to localhost on the default port (6379)
For more information on configuring Spring Data Redis, refer to the <a href="https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/">reference documentation</a>.</td>
</tr>
</table>

#### <a id ="java_servlet_container_initialization"></a>Java Servlet Container Initialization

<p>Our Spring Configuration created a Spring Bean named <code>springSessionRepositoryFilter</code> that implements <code>Filter</code>.
The <code>springSessionRepositoryFilter</code> bean is responsible for replacing the <code>HttpSession</code>
    with a custom implementation that is backed by Spring Session.</p>

In order for our <code>Filter</code> to do its magic:

+ Spring needs to load our <code>Config</code> class.

+ We need to ensure that our Servlet Container (i.e. Tomcat) uses our <code>springSessionRepositoryFilter</code> for every request.

Fortunately, Spring Session provides a utility class named <code>AbstractHttpSessionApplicationInitializer</code>, which helps us confirm that these two requirements are met.

The example below shows how to extend <code>AbstractHttpSessionApplicationInitializer</code>:

<code>src/main/java/sample/Initializer.java</code>

<pre><code><span>public</span> <span>class</span> <span>Initializer</span> <span>extends</span> AbstractHttpSessionApplicationInitializer { <i data-value="1"></i><b>(1)</b>

        <span>public</span> Initializer() {
                <span>super</span>(Config.class); <i data-value="2"></i><b>(2)</b>
        }
}</code></pre>

The name of our class (Initializer) does not matter. What is important is that we extend <code>AbstractHttpSessionApplicationInitializer</code>. Doing this achieves the following:

+ It ensures that the Spring Bean by the name <code>springSessionRepositoryFilter</code> is registered with our Servlet Container for every request.

+ It provides a mechanism to easily ensure that Spring loads our <code>Config</code>.

### <a id ="spring_redis"></a>Configuring <%= vars.product_short %> as a Backend

At this stage, Spring Session is now configured to use a Redis instance.
To use a <%= vars.product_short %> instance, create a `session-replication` tag for it.

<pre class=terminal>$ cf update-service INSTANCE_NAME -t session-replication</pre>

### <a id ="spring_redis_considerations"></a>Other Considerations

The `RedisHttpSessionConfiguration` tries to use the Redis CONFIG command.
The CONFIG command is not available due to security recommendations.

This feature can be disabled by exposing `ConfigureRedisAction.NO_OP` as a bean:

<pre><code>
@Bean
public static ConfigureRedisAction configureRedisAction() {
    return ConfigureRedisAction.NO_OP;
}
</code></pre>

However, disabling the configuration means that Redis cannot send namespace notifications.
This functionality is critical for apps that require `SessionDestroyedEvent` to be fired to clean up resources,
such as for WebSocket apps to ensure open WebSockets are closed when the `HttpSession` expires.
